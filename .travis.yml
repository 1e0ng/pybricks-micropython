# global options
dist: bionic
language:
  - c
compiler:
  - gcc
services:
  - docker
cache:
  directories:
    - "${HOME}/persist"
env:
  global:
    - MAKEOPTS="-j4"
    - JFROG_CLI_OFFER_CONFIG="false"
git:
  submodules: false

# define the successive stages
stages:
  - name: test

# define the jobs for the stages
# order of the jobs has longest running first to optimise total time
jobs:
  include:
    # unix coverage
    - stage: test
      env: NAME="unix coverage build and tests"
      install:
        # a specific urllib3 version is needed for requests and cpp-coveralls to work together
        - sudo pip install -Iv urllib3==1.22
        - sudo pip install cpp-coveralls
        - gcc --version
        - python3 --version
        - cd ${HOME}
        - git clone --depth=10 --branch=$(cat ${TRAVIS_BUILD_DIR}/micropython-tag) --recursive https://github.com/pybricks/micropython;
        - cd micropython/ports/pybricks
        - git checkout --recurse-submodules ${TRAVIS_PULL_REQUEST_BRANCH:-${TRAVIS_COMMIT}}
        - cd ../..
      script:
        - export CFLAGS_EXTRA="-DPYBRICKS_VERSION_MAJOR=0 -DPYBRICKS_VERSION_MINOR=0 -DPYBRICKS_VERSION_MICRO=0 -DPYBRICKS_VERSION_LEVEL_HEX=0xA -DPYBRICKS_VERSION_LEVEL_STR=\\\"alpha\\\" -DPYBRICKS_VERSION_SERIAL=0 -DPYBRICKS_HEXVERSION=0x020000A0"
        - make ${MAKEOPTS} -C mpy-cross
        - make ${MAKEOPTS} -C ports/unix deplibs
        - make ${MAKEOPTS} -C ports/unix coverage
        # run the main test suite
        - (cd tests && MICROPY_CPYTHON3=python3 MICROPY_MICROPYTHON=../ports/unix/micropython_coverage ./run-tests)
        - (cd tests && MICROPY_CPYTHON3=python3 MICROPY_MICROPYTHON=../ports/unix/micropython_coverage ./run-tests -d thread)
        - (cd tests && MICROPY_CPYTHON3=python3 MICROPY_MICROPYTHON=../ports/unix/micropython_coverage ./run-tests --emit native)
        - (cd tests && MICROPY_CPYTHON3=python3 MICROPY_MICROPYTHON=../ports/unix/micropython_coverage ./run-tests --via-mpy -d basics float)
        # test when input script comes from stdin
        - cat tests/basics/0prelim.py | ports/unix/micropython_coverage | grep -q 'abc'
        # run coveralls coverage analysis (try to, even if some builds/tests failed)
        # - (cd ports/unix && coveralls --root ../.. --build-root . --gcov $(which gcov) --gcov-options '\-o build-coverage/' --include py --include extmod)
      after_failure:
        - (cd tests && for exp in *.exp; do testbase=$(basename $exp .exp); echo -e "\nFAILURE $testbase"; diff -u $testbase.exp $testbase.out; done)

    # Pybricks ev3dev-stretch armel
    - stage: test
      env: NAME="Pybricks ev3dev-stretch build"
      before_install:
        - pyenv versions
        - sudo apt-get update -qq || true
      install:
        - npm install -g jfrog-cli-go
        - jfrog --version
        - pyenv shell 3.6
        - sudo apt-get install qemu-user-static
        - cd ${HOME}
        - git clone --depth=10 --branch=$(cat ${TRAVIS_BUILD_DIR}/micropython-tag) --recursive https://github.com/pybricks/micropython;
        - cd micropython/ports/pybricks
        - git checkout --recurse-submodules ${TRAVIS_PULL_REQUEST_BRANCH:-${TRAVIS_COMMIT}}
        - bricks/ev3dev/docker/setup.sh armel
      script:
        - docker exec --tty pybricks-ev3dev_armel make
        - docker exec --tty pybricks-ev3dev_armel make test
        - docker exec --tty pybricks-ev3dev_armel make test-ev3dev
      after_failure:
        - ./tests/dump-out-files.sh
      after_success:
        - jfrog rt config pybricks --url https://pybricks.jfrog.io/pybricks --access-token $JFROG_SECRET --interactive false
        - jfrog rt upload --build-name $TRAVIS_REPO_SLUG --build-number $TRAVIS_JOB_NUMBER
          "${HOME}/micropython/ports/pybricks/bricks/ev3dev/pybricks-micropython"
          pybricks-ev3dev/$TRAVIS_REPO_SLUG/build$TRAVIS_JOB_NUMBER/
        - jfrog rt build-collect-env $TRAVIS_REPO_SLUG $TRAVIS_JOB_NUMBER
        - jfrog rt build-add-git $TRAVIS_REPO_SLUG $TRAVIS_JOB_NUMBER $TRAVIS_BUILD_DIR
        - jfrog rt build-publish --build-url $TRAVIS_JOB_WEB_URL $TRAVIS_REPO_SLUG $TRAVIS_JOB_NUMBER


    # Pybricks Move Hub
    - stage: test
      env:
        - NAME="Pybricks Move Hub build"
        - PATH="/opt/gcc-arm-none-eabi-7-2018-q2-update/bin:${PATH}"
      install:
        - npm install -g jfrog-cli-go
        - jfrog --version
        - pyenv shell 3.6
        - cd ${HOME}
        - wget https://developer.arm.com/-/media/Files/downloads/gnu-rm/7-2018q2/gcc-arm-none-eabi-7-2018-q2-update-linux.tar.bz2
        - sudo tar -C /opt -xf gcc-arm-none-eabi-7-2018-q2-update-linux.tar.bz2
        - git clone --depth=10 --branch=$(cat ${TRAVIS_BUILD_DIR}/micropython-tag) --recursive https://github.com/pybricks/micropython;
        - cd micropython/ports/pybricks
        - git checkout --recurse-submodules ${TRAVIS_PULL_REQUEST_BRANCH:-${TRAVIS_COMMIT}}
        - cd ../..
      script:
        - make ${MAKEOPTS} -C ports/pybricks/bricks/movehub
      after_success:
        - jfrog rt config pybricks --url https://pybricks.jfrog.io/pybricks --access-token $JFROG_SECRET --interactive false
        - jfrog rt upload --build-name $TRAVIS_REPO_SLUG --build-number $TRAVIS_JOB_NUMBER
          "${HOME}/micropython/ports/pybricks/bricks/movehub/build/firmware.bin"
          pybricks-firmware/pybricks-micropython-movehub-build$TRAVIS_BUILD_NUMBER-firmware.bin
        - jfrog rt build-collect-env $TRAVIS_REPO_SLUG $TRAVIS_JOB_NUMBER
        - jfrog rt build-add-git $TRAVIS_REPO_SLUG $TRAVIS_JOB_NUMBER $TRAVIS_BUILD_DIR
        - jfrog rt build-publish --build-url $TRAVIS_JOB_WEB_URL $TRAVIS_REPO_SLUG $TRAVIS_JOB_NUMBER
        - $TRAVIS_BUILD_DIR/.travis/upload-fw-size.sh movehub "${HOME}/micropython/ports/pybricks/bricks/movehub/build/firmware.bin"

    # Pybricks City Hub (Hub No. 4)
    - stage: test
      env:
        - NAME="Pybricks City Hub build"
        - PATH="/opt/gcc-arm-none-eabi-7-2018-q2-update/bin:${PATH}"
      install:
        - npm install -g jfrog-cli-go
        - jfrog --version
        - pyenv shell 3.6
        - cd ${HOME}
        - wget https://developer.arm.com/-/media/Files/downloads/gnu-rm/7-2018q2/gcc-arm-none-eabi-7-2018-q2-update-linux.tar.bz2
        - sudo tar -C /opt -xf gcc-arm-none-eabi-7-2018-q2-update-linux.tar.bz2
        - git clone --depth=10 --branch=$(cat ${TRAVIS_BUILD_DIR}/micropython-tag) --recursive https://github.com/pybricks/micropython;
        - cd micropython/ports/pybricks
        - git checkout --recurse-submodules ${TRAVIS_PULL_REQUEST_BRANCH:-${TRAVIS_COMMIT}}
        - cd ../..
      script:
        - make ${MAKEOPTS} -C ports/pybricks/bricks/cityhub
      after_success:
        - jfrog rt config pybricks --url https://pybricks.jfrog.io/pybricks --access-token $JFROG_SECRET --interactive false
        - jfrog rt upload --build-name $TRAVIS_REPO_SLUG --build-number $TRAVIS_JOB_NUMBER
          "${HOME}/micropython/ports/pybricks/bricks/cityhub/build/firmware.bin"
          pybricks-firmware/pybricks-micropython-cityhub-build$TRAVIS_BUILD_NUMBER-firmware.bin
        - jfrog rt build-collect-env $TRAVIS_REPO_SLUG $TRAVIS_JOB_NUMBER
        - jfrog rt build-add-git $TRAVIS_REPO_SLUG $TRAVIS_JOB_NUMBER $TRAVIS_BUILD_DIR
        - jfrog rt build-publish --build-url $TRAVIS_JOB_WEB_URL $TRAVIS_REPO_SLUG $TRAVIS_JOB_NUMBER
        - $TRAVIS_BUILD_DIR/.travis/upload-fw-size.sh cityhub "${HOME}/micropython/ports/pybricks/bricks/cityhub/build/firmware.bin"

    # Pybricks Technic Control+ Hub (Hub No. 2)
    - stage: test
      env:
        - NAME="Pybricks Technic Control+ Hub build"
        - PATH="/opt/gcc-arm-none-eabi-7-2018-q2-update/bin:${PATH}"
      install:
        - npm install -g jfrog-cli-go
        - jfrog --version
        - pyenv shell 3.6
        - cd ${HOME}
        - wget https://developer.arm.com/-/media/Files/downloads/gnu-rm/7-2018q2/gcc-arm-none-eabi-7-2018-q2-update-linux.tar.bz2
        - sudo tar -C /opt -xf gcc-arm-none-eabi-7-2018-q2-update-linux.tar.bz2
        - git clone --depth=10 --branch=$(cat ${TRAVIS_BUILD_DIR}/micropython-tag) --recursive https://github.com/pybricks/micropython;
        - cd micropython/ports/pybricks
        - git checkout --recurse-submodules ${TRAVIS_PULL_REQUEST_BRANCH:-${TRAVIS_COMMIT}}
        - cd ../..
      script:
        - make ${MAKEOPTS} -C ports/pybricks/bricks/cplushub
      after_success:
        - jfrog rt config pybricks --url https://pybricks.jfrog.io/pybricks --access-token $JFROG_SECRET --interactive false
        - jfrog rt upload --build-name $TRAVIS_REPO_SLUG --build-number $TRAVIS_JOB_NUMBER
          "${HOME}/micropython/ports/pybricks/bricks/cplushub/build/firmware.bin"
          pybricks-firmware/pybricks-micropython-cplushub-build$TRAVIS_BUILD_NUMBER-firmware.bin
        - jfrog rt build-collect-env $TRAVIS_REPO_SLUG $TRAVIS_JOB_NUMBER
        - jfrog rt build-add-git $TRAVIS_REPO_SLUG $TRAVIS_JOB_NUMBER $TRAVIS_BUILD_DIR
        - jfrog rt build-publish --build-url $TRAVIS_JOB_WEB_URL $TRAVIS_REPO_SLUG $TRAVIS_JOB_NUMBER
        - $TRAVIS_BUILD_DIR/.travis/upload-fw-size.sh cplushub "${HOME}/micropython/ports/pybricks/bricks/cplushub/build/firmware.bin"

    # Pybricks NXT Brick
    - stage: test
      env:
        - NAME="Pybricks NXT Brick build"
        - PATH="/opt/gcc-arm-none-eabi-7-2018-q2-update/bin:${PATH}"
      install:
        - npm install -g jfrog-cli-go
        - jfrog --version
        - pyenv shell 3.6
        - cd ${HOME}
        - wget https://developer.arm.com/-/media/Files/downloads/gnu-rm/7-2018q2/gcc-arm-none-eabi-7-2018-q2-update-linux.tar.bz2
        - sudo tar -C /opt -xf gcc-arm-none-eabi-7-2018-q2-update-linux.tar.bz2
        - git clone --depth=10 --branch=$(cat ${TRAVIS_BUILD_DIR}/micropython-tag) --recursive https://github.com/pybricks/micropython;
        - cd micropython/ports/pybricks
        - git checkout --recurse-submodules ${TRAVIS_PULL_REQUEST_BRANCH:-${TRAVIS_COMMIT}}
        - cd ../..
      script:
        - make ${MAKEOPTS} -C ports/pybricks/bricks/nxt
      after_success:
        - jfrog rt config pybricks --url https://pybricks.jfrog.io/pybricks --access-token $JFROG_SECRET --interactive false
        - jfrog rt upload --build-name $TRAVIS_REPO_SLUG --build-number $TRAVIS_JOB_NUMBER
          "${HOME}/micropython/ports/pybricks/bricks/nxt/build/firmware.bin"
          pybricks-firmware/pybricks-micropython-nxt-build$TRAVIS_BUILD_NUMBER-firmware.bin
        - jfrog rt build-collect-env $TRAVIS_REPO_SLUG $TRAVIS_JOB_NUMBER
        - jfrog rt build-add-git $TRAVIS_REPO_SLUG $TRAVIS_JOB_NUMBER $TRAVIS_BUILD_DIR
        - jfrog rt build-publish --build-url $TRAVIS_JOB_WEB_URL $TRAVIS_REPO_SLUG $TRAVIS_JOB_NUMBER
        - $TRAVIS_BUILD_DIR/.travis/upload-fw-size.sh nxt "${HOME}/micropython/ports/pybricks/bricks/nxt/build/firmware.bin"

    # Pybricks bionic
    - stage: test
      env: NAME="Pybricks ev3dev bionic build"
      before_install:
        - pyenv versions
        - sudo apt-get update -qq || true
      install:
        - npm install -g jfrog-cli-go
        - jfrog --version
        - pyenv shell 3.6
        - sudo apt-add-repository --update --yes ppa:ev3dev/tools
        - sudo apt-get install --no-install-recommends --yes
          alsa-utils
          espeak
          ev3dev-media
          ev3dev-mocks
          libasound2-plugin-ev3dev
          libffi-dev
          libgrx-3.0-dev
          libi2c-dev
          libmagickwand-6.q16-3
          libudev-dev
          libumockdev0
          pkg-config
          uthash-dev
          xfonts-100dpi
        - cd ${HOME}
        - git clone --depth=10 --branch=$(cat ${TRAVIS_BUILD_DIR}/micropython-tag) --recursive https://github.com/pybricks/micropython;
        - cd micropython/ports/pybricks
        - git checkout --recurse-submodules ${TRAVIS_PULL_REQUEST_BRANCH:-${TRAVIS_COMMIT}}
      before_script:
        - export CROSS_COMPILE=
      script:
        - make ${MAKEOPTS} -C bricks/ev3dev
        - make ${MAKEOPTS} -C bricks/ev3dev test
        - make ${MAKEOPTS} -C bricks/ev3dev test-ev3dev
      after_failure:
        - ./tests/dump-out-files.sh
      after_success:
        - jfrog rt config pybricks --url https://pybricks.jfrog.io/pybricks --access-token $JFROG_SECRET --interactive false
        - jfrog rt build-collect-env $TRAVIS_REPO_SLUG $TRAVIS_JOB_NUMBER
        - jfrog rt build-add-git $TRAVIS_REPO_SLUG $TRAVIS_JOB_NUMBER $TRAVIS_BUILD_DIR
        - jfrog rt build-publish --build-url $TRAVIS_JOB_WEB_URL $TRAVIS_REPO_SLUG $TRAVIS_JOB_NUMBER

    # pbio tests/coverage
    - stage: test
      env: NAME="pbio tests/coverage"
      before_install:
        - pyenv versions
        - sudo apt-get update -qq || true
      install:
        - sudo apt-get install --yes doxygen
        - npm install -g jfrog-cli-go
        - jfrog --version
        - pyenv shell 3.6
        - cd ${HOME}
        - git clone --depth=10 --branch=$(cat ${TRAVIS_BUILD_DIR}/micropython-tag) --recursive https://github.com/pybricks/micropython;
        - cd micropython/ports/pybricks
        - git checkout --recurse-submodules ${TRAVIS_PULL_REQUEST_BRANCH:-${TRAVIS_COMMIT}}
      before_script:
        - export CROSS_COMPILE=
      script:
        - make ${MAKEOPTS} -C lib/pbio/test
        - ./lib/pbio/test/build/test-pbio
        - make $(MAKEOPTS) -C lib/pbio/doc
        - make ${MAKEOPTS} -C lib/pbio/test COVERAGE=1
        - ./lib/pbio/test/build-coverage/test-pbio
        - # TODO: run coveralls
      after_success:
        - jfrog rt config pybricks --url https://pybricks.jfrog.io/pybricks --access-token $JFROG_SECRET --interactive false
        - jfrog rt build-collect-env $TRAVIS_REPO_SLUG $TRAVIS_JOB_NUMBER
        - jfrog rt build-add-git $TRAVIS_REPO_SLUG $TRAVIS_JOB_NUMBER $TRAVIS_BUILD_DIR
        - jfrog rt build-publish --build-url $TRAVIS_JOB_WEB_URL $TRAVIS_REPO_SLUG $TRAVIS_JOB_NUMBER
