# global options
language:
  - c
compiler:
  - gcc
services:
  - docker
cache:
  directories:
    - "${HOME}/persist"
env:
  global:
    - MAKEOPTS="-j4"

# define the successive stages
stages:
  - name: test

# define the jobs for the stages
# order of the jobs has longest running first to optimise total time
jobs:
  include:
    # unix coverage
    - stage: test
      env: NAME="unix coverage build and tests"
      install:
        # a specific urllib3 version is needed for requests and cpp-coveralls to work together
        - sudo pip install -Iv urllib3==1.22
        - sudo pip install cpp-coveralls
        - gcc --version
        - python3 --version
        - cd ${HOME}
        - git clone --depth=10 --recursive https://github.com/pybricks/micropython
        - cd micropython/ports/pybricks
        - git checkout ${TRAVIS_COMMIT}
        - cd ../..
      script:
        - make ${MAKEOPTS} -C mpy-cross
        - make ${MAKEOPTS} -C ports/unix deplibs
        - make ${MAKEOPTS} -C ports/unix coverage
        # run the main test suite
        - (cd tests && MICROPY_CPYTHON3=python3 MICROPY_MICROPYTHON=../ports/unix/micropython_coverage ./run-tests)
        - (cd tests && MICROPY_CPYTHON3=python3 MICROPY_MICROPYTHON=../ports/unix/micropython_coverage ./run-tests -d thread)
        - (cd tests && MICROPY_CPYTHON3=python3 MICROPY_MICROPYTHON=../ports/unix/micropython_coverage ./run-tests --emit native)
        - (cd tests && MICROPY_CPYTHON3=python3 MICROPY_MICROPYTHON=../ports/unix/micropython_coverage ./run-tests --via-mpy -d basics float)
        # test when input script comes from stdin
        - cat tests/basics/0prelim.py | ports/unix/micropython_coverage | grep -q 'abc'
        # run coveralls coverage analysis (try to, even if some builds/tests failed)
        # - (cd ports/unix && coveralls --root ../.. --build-root . --gcov $(which gcov) --gcov-options '\-o build-coverage/' --include py --include extmod)
      after_failure:
        - (cd tests && for exp in *.exp; do testbase=$(basename $exp .exp); echo -e "\nFAILURE $testbase"; diff -u $testbase.exp $testbase.out; done)

    # Pybricks ev3dev
    - stage: test
      env: NAME="Pybricks ev3dev build"
      install:
        - sudo apt update -qq || true
        - sudo apt install qemu-user-static
        - cd ${HOME}
        - git clone --depth=10 --recursive https://github.com/pybricks/micropython
        - cd micropython/ports/pybricks
        - git checkout ${TRAVIS_COMMIT}
        - bricks/ev3dev/docker/setup.sh armel
      script:
        - docker exec --tty pybricks-ev3dev_armel make
        - docker exec --tty pybricks-ev3dev_armel make test

    # Pybricks Move Hub
    - stage: test
      env:
        - NAME="Pybricks Move Hub build"
        - PATH="/opt/gcc-arm-none-eabi-7-2018-q2-update/bin:${PATH}"
      install:
        - cd ${HOME}
        - wget https://developer.arm.com/-/media/Files/downloads/gnu-rm/7-2018q2/gcc-arm-none-eabi-7-2018-q2-update-linux.tar.bz2
        - sudo tar -C /opt -xf gcc-arm-none-eabi-7-2018-q2-update-linux.tar.bz2
        - git clone --depth=10 --recursive https://github.com/pybricks/micropython
        - cd micropython/ports/pybricks
        - git checkout ${TRAVIS_COMMIT}
        - cd ../..
      script:
        - make ${MAKEOPTS} -C ports/pybricks/bricks/MOVEHUB
